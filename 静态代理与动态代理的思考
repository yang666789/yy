代理模式是常用的Java设计模式，它的特征是代理类与委托类有同样的接口，代理类主要负责为委托类预处理消息、过滤消息、把消息转发给委托类，以及事后处理消息等。
代理类与委托类之间通常会存在关联关系，一个代理类的对象与一个委托类的对象关联，代理类的对象本身并不真正实现服务，而是通过调用委托类的对象的相关方法，
来提供特定的服务。按照代理类的创建时期，代理类可分为两种。
静态代理类：由程序员创建或由特定工具自动生成源代码，再对其编译。在程序运行前，代理类的.class文件就已经存在了。
动态代理类：在程序运行时，运用反射机制动态创建而成。
静态态代理通常只代理一个类，动态代理是代理一个接口下的多个实现类。
静态代理事先知道要代理的是什么，而动态代理不知道要代理什么东西，只有在运行时才知道。
动态代理是实现JDK里的InvocationHandler接口的invoke方法，但注意的是代理的是接口，也就是你的业务类必须要实现接口，通过Proxy里的newProxyInstance得到
代理对象。
还有一种动态代理CGLIB，代理的是类，不需要业务类继承接口，通过派生的子类来实现代理。通过在运行时，动态修改字节码达到修改类的目的。

静态代理和动态代理的区别
静态代理事先知道要代理的是什么，只代理一个类
动态代只有在运行时才知道要代理的东西，代理一个接口下的多个实现
二、	静态代理和动态代理组成
1.	抽象角色：通过接口或抽象类生命真实角色的业务方法
2.	代理角色：实现抽象角色，是真实角色的代理
3.	真实角色：实现抽象角色，定义真实角色的业务，共代理角色调用
三、	静态代理的优缺点
使用静态代理模式，可以在不改变原有类的基础上，增加额外功能。但如果被代理的类数目多，则需要增加很多代理类。可以使用动态代理解决这个问题
四、	动态代理的优缺点
可以解决创建多个静态代理的麻烦，更具有灵活性。

在我的代码中有继承同个接口的两个类，其中静态代理每个类都要有个代理，重复量多，而动态代理只需有一个代理处理器即可，动态地进行代理操作。
